:PROPERTIES:
:ID:       ba9f538a-c5c5-4e21-a2c9-cec8aed13e1b
:ROAM_ALIASES: "Structure and Interpretation of Computer Programs"
:END:
#+options: ':t *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil expand-links:t f:t inline:t num:nil p:nil pri:nil prop:nil
#+options: stat:t tags:t tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: SICP
#+date: <2024-05-17 Fri>
#+author: chu the pup
#+email: chu@dogboner.xyz
#+description: 20221206014026-sicp.org
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 29.3 (Org mode 9.7)
#+cite_export:
* Contents :toc:
:PROPERTIES:
:ID:       139f3960-a140-49a5-82f3-57edce5f4c19
:END:
- [[#1-building-abstractions-with-procedures][1. Building Abstractions with Procedures]]
  - [[#11-the-elements-of-programming][1.1 The Elements of Programming]]
  - [[#12-procedures-and-the-processes-they-generate][1.2 Procedures and the Processes They Generate]]
  - [[#13-formulating-abstractions-with-higher-order-procedures][1.3 Formulating Abstractions with Higher-Order Procedures]]

* 1. Building Abstractions with Procedures
:PROPERTIES:
:ID:       a4002753-6283-4be0-95cb-f502af78a2d2
:END:
** 1.1 The Elements of Programming
:PROPERTIES:
:ID:       3b75a0bc-2163-4149-b28c-59da9ac37a90
:END:
*** 1.1.1 Expressions
:PROPERTIES:
:ID:       a51bd70e-9928-48bb-b3f6-4aea9e4c5bc2
:END:
*** 1.1.2 Naming and the Environment
:PROPERTIES:
:ID:       e35c4fa4-b0df-4b88-9ad5-44e1f02eea5e
:END:
*** 1.1.3 Evaluating Combinations
:PROPERTIES:
:ID:       92c98bea-e911-4d67-8baa-93f6eb4e4693
:END:
*** 1.1.4 Compound Procedures
:PROPERTIES:
:ID:       dead68d2-7a9e-4b77-8425-01cd0065596e
:END:
*** 1.1.5 The Substitution Model for Procedure Application
:PROPERTIES:
:ID:       ca7dbd3f-78e1-4986-847d-24eb3dd905a1
:END:
*** 1.1.6 Conditional Expressions and Predicates
:PROPERTIES:
:ID:       3776dcb8-466c-4e28-84c6-8cdc0f0942d2
:END:
**** DONE Ex. 1.1
:PROPERTIES:
:ID:       51912383-35f6-4f8e-afa4-420cf074c42e
:END:

#+begin_quote
*Exercise 1.1:* Below is a sequence of expressions.  What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.
#+end_quote

#+begin_src racket :lang sicp
10 ; 10

(+ 5 3 4) ; 5 + 3 + 4

(- 9 1) ; 9 - 1

(/ 6 2) ; 6 รท 2

(+ (* 2 4) (- 4 6)) ; (2 * 4) + (4 - 6)

(define a 3) ; define a to be 3

(define b (+ a 1)) ; define b to be whatever a is, plus one

(+ a b (* a b)) ; a + b + (a * b) -> 3 + 4 + (3 * 4) -> 3 + 4 + 12 -> 7 + 12 = 19

(= a b) ; returns #f (the nil/null/empty/false predicate) because a is not equal to b

(if (and (> b a) (< b (* a b))) ; if b is greater than a, and b is less than a times b,
    b ; return b
    a); else, return a

(cond ((= a 4) 6) ; if a = 4, return 6
      ((= b 4) (+ 6 7 a)) ; if b = 4 return 6 + 7 + a
      (else 25)) ; else, return 25

(+ 2 (if (> b a) b a)) ; 2 + b + a if b > a

(* (cond ((> a b) a) ; if a is greater than b, pass a onto multiply
         ((< a b) b) ; if a is less than b, pass b onto multiply
         (else -1)) ; else, return negative one
       (+ a 1)) ; ... times a + 1 the result of cond
#+end_src

**** DONE Ex. 1.2
:PROPERTIES:
:ID:       22007071-eaca-4d9e-b88f-ef21cf5759eb
:END:

#+begin_quote
*Exercise 1.2:* Translate the following expression into prefix
form.

     5 + 4 + (2 - (3 - (6 + 4/5)))
     -----------------------------
            3(6 - 2)(2 - 7)
#+end_quote

#+begin_src racket :lang sicp
(/ (+ 5 4 (- 2 (- 3 (+ 6 4/5)))) (* 3 (- 6 2) (- 2 7)))
#+end_src

#+RESULTS:
: -37/150

**** DONE Ex. 1.3
:PROPERTIES:
:ID:       366eb525-f202-45fe-ad71-fabdb54f3ef4
:END:

#+begin_quote
*Exercise 1.3:* Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.
#+end_quote

| a and b are greater than c                      | sum-square a and b              |
| a and c are greater than b                      | sum-square a and c              |
| b and c are greater than a                      | sum-square b and c              |
| a is greater than both b and c, which are equal | sum-square a with either b or c |
| b is greater than both a and c, which are equal | sum-square b with either a or c |
| c is greater than both a and b, which are equal | sum-square c with either a or b |
| all three numbers are equal to one another      | sum-square any two variables    |
| all three numbers are equal to zero             | return 0 or throw an error (not implemented here) |

#+begin_src racket :lang sicp
(define (square a)
  (* a a))

(define (sum-square a b)
  (+ (square a) (square b)))

(define (fun a b c)
  (cond ((and (>= a c) (>= b c)) (sum-square a b))
        ((and (>= a b) (>= c b)) (sum-square a c))
        (else (sum-square b c))))

;; Checks
(= (fun 10 10 10) (sum-square 10 10))

(= (fun 1 10 10) (sum-square 10 10))
(= (fun 10 1 10) (sum-square 10 10))
(= (fun 10 10 1) (sum-square 10 10))

(= (fun 1 10 100) (sum-square 10 100))
(= (fun 1 100 10) (sum-square 10 100))
(= (fun 10 1 100) (sum-square 10 100))
(= (fun 10 100 1) (sum-square 10 100))
(= (fun 100 10 1) (sum-square 10 100))
(= (fun 100 1 10) (sum-square 10 100))
#+end_src

#+RESULTS:
#+begin_example
#t
#t
#t
#t
#t
#t
#t
#t
#t
#t
#+end_example

**** DONE Ex. 1.4
:PROPERTIES:
:ID:       65266087-6c19-4ac4-ba9f-07cf00529a72
:END:

#+begin_quote
*Exercise 1.4:* Observe that our model of evaluation allows for combinations whose operators are compound expressions.  Use this observation to describe the behavior of the following procedure:
#+end_quote

#+begin_src racket :lang sicp
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))

(a-plus-abs-b 1 -15)
#+end_src

#+RESULTS:
: 16

If ~b~ is greater than ~0~, add ~a~ and ~b~.
If ~b~ is a negative number, negate it, i.e.,:

#+begin_src racket :lang sicp
(- -15)
#+end_src

#+RESULTS:
: 15

and /then/ add ~a~ and ~b~ (which is now ~(- b)~ (which is the absolute value of ~b~)) together.

In other words, this is making use of unary operators.

**** DONE Ex. 1.5
:PROPERTIES:
:ID:       5be84ee1-5cb6-400c-b80d-b2bfc5cf53f8
:END:

#+begin_quote
*Exercise 1.5:* Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation.  He defines the following two procedures:
#+end_quote

#+begin_src racket :eval no :lang sicp
(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

;; Then he evaluates the expression

(test 0 (p))
#+end_src

#+begin_quote
What behavior will Ben observe with an interpreter that uses applicative-order evaluation?

What behavior will he observe with an interpreter that uses normal-order evaluation?

Explain your answer.  (Assume that the evaluation rule for the special form `if' is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)
#+end_quote


Applicative-order evaluation: ~(test 0 (p))~ makes it hang / get stuck in a loop as ~(p)~ gets eternally deferred.

A normal order-evaluator would do this instead:

#+begin_src racket :lang sicp
(test 0 (p))

(if (= 0 0)
     0
     (p))

(if #t
     0
     (p))
0
#+end_src

*** 1.1.7 Example: Square Roots by Newton's Method
:PROPERTIES:
:ID:       7feb61be-7b54-4bd8-b32b-c8dce66396c4
:END:
**** DONE Ex. 1.6
:PROPERTIES:
:ID:       3224c89e-156e-4615-8ebe-6adcb347ed5e
:END:

#+begin_quote
*Exercise 1.6:* Alyssa P. Hacker doesn't see why `if' needs to be provided as a special form.  "Why can't I just define it as an ordinary procedure in terms of `cond'?" she asks.  Alyssa's friend Eva Lu Ator claims this can indeed be done, and she defines a new version of `if':
#+end_quote

#+begin_src racket :lang sicp
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
#+end_src

#+begin_quote
Eva demonstrates the program for Alyssa:
#+end_quote

#+begin_src racket :lang sicp
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))

(new-if (= 2 3) 0 5)

(new-if (= 1 1) 0 5)
#+end_src

#+RESULTS:
: 5
: 0

Delighted, Alyssa uses `new-if' to rewrite the square-root program:

#+begin_src racket :lang sicp
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)))
#+end_src

What happens when Alyssa attempts to use this to compute square
roots?  Explain.

It creates an infinite loop. Any function supplied to new-if will be applied, sqrt-iter
then loops forever after.
**** DONE Ex. 1.7
:PROPERTIES:
:ID:       a51d676d-5ff2-440f-8a4d-ea5c355ab907
:END:
#+begin_quote
*Exercise 1.7:* The `good-enough?' test used in computing square roots will not be very effective for finding the square roots of very small numbers.  Also, in real computers, arithmetic operations are almost always performed with limited precision.  This makes our test inadequate for very large numbers.  Explain these statements, with examples showing how the test fails for small and large numbers.  An alternative strategy for implementing `good-enough?' is to watch how `guess' changes from one iteration to the next and to stop when the change is a very small fraction of the guess.  Design a square-root procedure that uses this kind of end test.  Does this work better for small and large numbers?
#+end_quote

#+begin_src racket :lang sicp
(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (square x)
  (* x x))

;; better for small numbers, less accurate for larger numbers
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.0000000001)) ; 0.01 is too small, 0.001 gets closer, etc.

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))

(sqrt 52) ; => 7.21110255093

(sqrt 2) ; => 1.41421356237
#+end_src

**** DONE Ex. 1.8
:PROPERTIES:
:ID:       97d13728-4a5a-40ec-8af6-009c7e2a1ec7
:END:

#+begin_src racket :lang sicp
(define (average x y)
  (/ (+ (/ x (expt y 2)) (* 2 y)) 3))

(define (improve guess x)
  (average guess (/ x guess)))

(define (cube x)
  (* x x x))

(define (good-enough? guess x)
  (< (abs (- (cube guess) x)) 0.1))

(define (cbrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (cbrt-iter (improve guess x)
                 x)))

(define (cbrt x)
  (cbrt-iter 1.0 x))

(cbrt 2)
#+end_src

#+RESULTS:
: 1.2680202967796828

The actual answer is 1.25992104989, but, close enough!

*** 1.1.8 Procedures as Black-Box Abstractions
:PROPERTIES:
:ID:       1c22939d-b5b0-47b8-8185-4e0647810308
:END:
** 1.2 Procedures and the Processes They Generate
:PROPERTIES:
:ID:       d2d1ec82-b9f9-4851-b098-b3a8f881709a
:END:
*** 1.2.1 Linear Recursion and Iteration
:PROPERTIES:
:ID:       efbc1799-cb3c-4fed-91d9-76816b9cebad
:END:

The Berkeley series of lectures over the SICP (as recorded from a 2010 webclass) has the professor there noting on this section and more or less stating that this is much less important "these days" (2010) and that, for the most part, one can get by without having to worry too much about these efficiencies when said worry isn't warranted. Id est, someone programming complex, cutting edge live-rendered 3D graphics for a video game /will/ want to worry about making their code more efficient in order to keep up the phantasmagoria, whereas someone modeling a logic system probably won't have to worry about such things.

**** DONE Ex. 1.9
:PROPERTIES:
:ID:       acde993a-1aa0-4afa-a558-9953bec4cc5d
:END:
Each of the following two procedures defines a method for adding two positive integers in terms of the procedures inc, which increments its argument by 1, and dec, which decrements its argument by 1.
#+begin_src racket :lang sicp
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))
(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
#+end_src
***** DONE 1.9.1
#+begin_src racket :lang sicp
(+ 4 5)
(inc (+ (dec 4) 5))
(inc (+ 3 5))
(inc (inc (+ (dec 3) 5)))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ (dec 2) 5))))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ (dec 1) 5)))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
#+end_src
***** DONE 1.9.2
#+begin_src racket :lang sicp
(+ 4 5)
(+ (dec 4) (inc 5))
(+ 3 6)
(+ (dec 3) (inc 6))
(+ 2 7)
(+ (dec 2) (inc 7))
(+ 1 8)
(+ (dec 1) (inc 8))
(+ 0 9)
9
#+end_src
**** DONE Ex. 1.10
:PROPERTIES:
:ID:       ce84cecb-4b33-4468-a7c5-ae378eebea3f
:END:
The following procedure computes a mathematical function called Ackermannโs function.
#+begin_src racket :lang sicp
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
;; What are the values of the following expressions?
(A 1 10)
(A 2 4)
(A 3 3)
;; Consider the following procedures, where A is the procedure defined above:
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))
;; Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, (k n) computes 5n2.
#+end_src

***** DONE 1.10.1
#+begin_src racket :lang sicp
(A 1 10)
(A 0 (A 1 9))
(A 0 (A 0 (A 1 8)))
(A 0 (A 0 (A 0 (A 1 7))))
(A 0 (A 0 (A 0 (A 0 (A 1 6)))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
(A 0 (A 0 (A 0 (A 0 (A 0 32)))))
(A 0 (A 0 (A 0 (A 0 64))))
(A 0 (A 0 (A 0 128)))
(A 0 (A 0 256))
(A 0 512)
1024
#+end_src
***** DONE 1.10.2
#+begin_src racket :lang sicp
(A 2 4)
(A 1 (A 2 3))
(A 1 (A 1 (A 2 2)))
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2)))
(A 1 (A 1 (A 0 (A 1 1))))
(A 1 (A 1 (A 0 2)))
(A 1 (A 1 4))
(A 1 (A 0 (A 1 3)))
(A 1 (A 0 (A 0 (A 1 2))))
(A 1 (A 0 (A 0 (A 0 (A 1 1)))))
(A 1 (A 0 (A 0 (A 0 2))))
(A 1 (A 0 (A 0 4)))
(A 1 (A 0 8))
(A 1 16)
(A 0 (A 1 15))
(A 0 (A 0 (A 1 14)))
(A 0 (A 0 (A 0 (A 1 13))))
(A 0 (A 0 (A 0 (A 0 (A 1 12)))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 1 11))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 10)))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 9))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 8)))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 7))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 6)))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 32)))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 64))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 128)))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 256))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 512)))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 1024))))))
(A 0 (A 0 (A 0 (A 0 (A 0 2048)))))
(A 0 (A 0 (A 0 (A 0 4096))))
(A 0 (A 0 (A 0 8192)))
(A 0 (A 0 16384))
(A 0 32768)
65536
#+end_src
***** DONE 1.10.3
#+begin_src racket :lang sicp
(A 3 3)
(A 2 (A 3 2))
(A 2 (A 2 (A 3 1)))
(A 2 (A 2 2))
(A 2 (A 1 (A 2 1)))
(A 2 (A 1 2))
(A 2 (A 0 (A 1 1)))
(A 2 (A 0 2))
(A 2 4)
(A 1 (A 2 3))
(A 1 (A 1 (A 2 2)))
(A 1 (A 1 (A 1 (A 2 1))))
(A 1 (A 1 (A 1 2)))
(A 1 (A 1 (A 0 (A 1 1))))
(A 1 (A 1 (A 0 2)))
(A 1 (A 1 4))
(A 1 (A 0 (A 1 3)))
(A 1 (A 0 (A 0 (A 1 2))))
(A 1 (A 0 (A 0 (A 0 (A 1 1)))))
(A 1 (A 0 (A 0 (A 0 2))))
(A 1 (A 0 (A 0 4)))
(A 1 (A 0 8))
(A 1 16)
(A 0 (A 1 15))
(A 0 (A 0 (A 1 14)))
(A 0 (A 0 (A 0 (A 1 13))))
(A 0 (A 0 (A 0 (A 0 (A 1 12)))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 1 11))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 10)))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 9))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 8)))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 7))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 6)))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 32)))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 64))))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 128)))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 256))))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 512)))))))
(A 0 (A 0 (A 0 (A 0 (A 0 (A 0 1024))))))
(A 0 (A 0 (A 0 (A 0 (A 0 2048)))))
(A 0 (A 0 (A 0 (A 0 4096))))
(A 0 (A 0 (A 0 8192)))
(A 0 (A 0 16384))
(A 0 32768)
65536
#+end_src

Or something like that.
***** DONE 1.10.4
#+begin_src racket :lang sicp
(define (f n) (A 0 n))
#+end_src
If (A 0 n) = (f n),
then x = 0,
then * 2 y,
so 2n = (f n).
***** DONE 1.10.5
If (A 1 n) = (g n),
then x = 1,
then (unless n = 1 = y),
= to (A 0 (A 1 (- n 1))),
e.g., the 'else' statement
is the only one to be true here
as x = 1 \therefore x \neq 0,
if n = y = 0, then (g n) = 0
if n = y = 1, then (g n) = 2
if n = y >=2, then (g n)
= (A (- 1 1) (A 1 (- n 1)))
= (A 0 (A 1 (- n 1)))
= (* 2 (A 1 (- n 1))) \land (A 1 (- n 1)) = g(n-1)
\therefore g(n)=2*g(n-1)
Using calculus we can rewrite and simplify that as g(n)=2^n
n=0=2^0=1 \land n=1=2^1=2
***** DONE 1.10.6
(define (h n) (A 2 n))
(A 2 n)
if n = y = 0 = h(n) = 0
if n = y = 1 = h(n) = 2
(A 2 2) = (A 1 (A 2 1)) =
(A 1 2) = (A 0 (A 1 1)) =
(A 0 2) = * 2 2 = 4
(A 0 n) = * 2 n = 2n
and upwards recursing,
h(n)=2^{h(n-1)}=2^{2^{h(n-1)}} on and on.
***** DONE 1.10.7
Answer to the seventh one is given in the book, as in, it is not an actual exercise.
*** 1.2.2 Tree Recursion
:PROPERTIES:
:ID:       5501f88b-9666-4dcf-b364-468603fb6452
:END:
**** TODO Ex. 1.11
:PROPERTIES:
:ID:       c1710638-3b77-46eb-838b-e6262914de1d
:END:
Exercise 1.11 A function f is defined by the rule that rules f(n)=n if n<3 and f(n)=f(nโ1)+2f(nโ2)+3f(nโ3) if nโฅ3.

Write a procedure that computes f by means of a recursive process.
#+begin_src racket :lang sicp
(define (f n)
  (cond ((<  n 3) n)
        ((>= n 3) (+ (* 3 (f (- n 3)))
                     (* 2 (f (- n 2)))
                     (f (- n 1))))))
#+end_src
Write a procedure that computes f by means of an iterative process.
Exercise 1.11 A function f is defined by the rule that rules f(n)=n if n<3 and f(n)=f(nโ1)+2f(nโ2)+3f(nโ3) if nโฅ3.
f(0) = 0
f(1) = 1
f(2) = 2
f(3) = f(3-1)+2f(3-2)+3f(3-3)
     = f(2)+2f(1)+3f(0)
     = 2+(2*1)+(3*0)
     = 2+2+0
     = 4
f(4) = f(4-1)+2f(4-2)+3f(4-3)
     = f(3) +2f(2)+3f(1)
     = (1*4)+(2*2)+(3*1)
     = 4    + 4   + 3
     = 8    + 3
     = 11
#+begin_src racket :lang sicp
;; TODO
(define (f n)
  (fi (a b n)))

(define (fi a b c)
  (cond ((<  c 3) n)
        ((>= c 3) ;; need find state variables (where a = (f 1); b = (f 0), or maybe a = (f 3); b = (f 2)?)
#+end_src

Fri Jun  7 08:32:02 2024

#+begin_src racket :lang sicp
(define (fr n)
  (if (<= n 3) n
      (> n 3) (+ (* 3 (f (- n 3)))
                 (* 2 (f (- n 2)))
                 (f (- n 1)))))

(define (f n)
  (f-iter 10 3 n))

(define (f-iter a b count)
  (if (<= count 3)
      b
      (f-iter (+ a b) a (- count 1))))

#+end_src

**** TODO Ex. 1.12
:PROPERTIES:
:ID:       8a169f9c-c4cc-4758-8267-5e13f4293769
:END:
**** TODO Ex. 1.13
:PROPERTIES:
:ID:       a7436223-68e1-49ba-bcb9-e6bc376413d2
:END:
*** 1.2.3 Orders of Growth
:PROPERTIES:
:ID:       435e485d-7c1b-4fc8-ae0e-06d5da3e7235
:END:
**** TODO Ex. 1.14
:PROPERTIES:
:ID:       7f1c2ef6-84d1-4603-879e-6804a4dbd022
:END:
**** TODO Ex. 1.15
:PROPERTIES:
:ID:       2730882c-15c2-42dd-9b4e-f697b17eec8a
:END:
*** 1.2.4 Exponentiation
:PROPERTIES:
:ID:       7b225671-49b0-47ad-b3b7-e7181db2d220
:END:
**** TODO Ex. 1.16
:PROPERTIES:
:ID:       a48f8074-05a4-4c44-a416-8efffc637375
:END:
**** TODO Ex. 1.17
:PROPERTIES:
:ID:       66f0c1e8-35cd-4a9e-80f7-5b433c9ef270
:END:
**** TODO Ex. 1.18
:PROPERTIES:
:ID:       52c3c2a3-0a0b-4d58-a797-ddc240e18e8a
:END:
**** TODO Ex. 1.19
:PROPERTIES:
:ID:       40721fc0-8109-4b89-bcac-4bc0810ea7b0
:END:
*** 1.2.5 Greatest Common Divisors
:PROPERTIES:
:ID:       659d6219-2ac7-4157-adbb-1810c5d2913a
:END:
**** TODO Ex. 1.20
:PROPERTIES:
:ID:       4b31c545-c45d-4d08-a1af-e88f5caad412
:END:
*** 1.2.6 Example: Testing for Primality
:PROPERTIES:
:ID:       9039e0da-d6c9-4963-bd73-b0c0ab9d9865
:END:
**** TODO Ex. 1.21
:PROPERTIES:
:ID:       a86c0858-a5bc-47c9-a0e7-3ff9ba2be825
:END:
**** TODO Ex. 1.22
:PROPERTIES:
:ID:       b199a1dc-c677-4c78-b7b5-d9b8059a1f06
:END:
**** TODO Ex. 1.23
:PROPERTIES:
:ID:       170ee34d-b93a-4cd1-a168-2450f32a89af
:END:
**** TODO Ex. 1.24
:PROPERTIES:
:ID:       489d2ed2-1ef3-4f9b-b58d-5cf085899751
:END:
**** TODO Ex. 1.25
:PROPERTIES:
:ID:       3c150bf6-c48d-4d9b-a103-d8ae417a1bce
:END:
**** TODO Ex. 1.26
:PROPERTIES:
:ID:       62bea596-a176-49b9-ad55-c7e437b6cc6f
:END:
**** TODO Ex. 1.27
:PROPERTIES:
:ID:       a75648ba-4dd0-4e7f-8df3-b6f984cd5e0e
:END:
**** TODO Ex. 1.28
:PROPERTIES:
:ID:       66190d20-9f66-42f7-85de-3de077359fb1
:END:
** 1.3 Formulating Abstractions with Higher-Order Procedures
:PROPERTIES:
:ID:       dccf0ffa-9424-45a7-9bab-e86b7b4e18d6
:END:
