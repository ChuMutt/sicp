:PROPERTIES:
:ID:       ba9f538a-c5c5-4e21-a2c9-cec8aed13e1b
:END:
#+title: SICP
#+description: 20221206014026-sicp.org
* Contents :toc:
:PROPERTIES:
:ID:       139f3960-a140-49a5-82f3-57edce5f4c19
:END:
- [[#1-building-abstractions-with-procedures][1. Building Abstractions with Procedures]]
  - [[#ex-11][Ex. 1.1]]
  - [[#ex-12][Ex. 1.2]]
  - [[#ex-13][Ex. 1.3]]
  - [[#ex-14][Ex. 1.4]]
  - [[#ex-15][Ex. 1.5]]
  - [[#ex-16][Ex. 1.6]]
  - [[#ex-17][Ex. 1.7]]

* 1. Building Abstractions with Procedures
:PROPERTIES:
:ID:       a4002753-6283-4be0-95cb-f502af78a2d2
:END:
** DONE Ex. 1.1
:PROPERTIES:
:ID:       51912383-35f6-4f8e-afa4-420cf074c42e
:END:

#+begin_quote
*Exercise 1.1:* Below is a sequence of expressions.  What is the result printed by the interpreter in response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented.
#+end_quote

#+begin_src racket
#lang sicp

10 ; 10.

(+ 5 3 4) ; 5 + 3 + 4

(- 9 1) ; 9 - 1

(/ 6 2) ; 6 รท 2

(+ (* 2 4) (- 4 6)) ; (2 * 4) + (4 - 6)

(define a 3) ; define a to be 3

(define b (+ a 1)) ; define b to be whatever a is, plus one

(+ a b (* a b)) ; a + b + (a * b) -> 3 + 4 + (3 * 4) -> 3 + 4 + 12 -> 7 + 12 = 19

(= a b) ; returns #f (the nil/null/empty/false predicate) because a is not equal to b

(if (and (> b a) (< b (* a b))) ; if b is greater than a, and b is less than a times b,
    b ; return b
    a); else, return a

(cond ((= a 4) 6) ; if a = 4, return 6
      ((= b 4) (+ 6 7 a)) ; if b = 4 return 6 + 7 + a
      (else 25)) ; else, return 25

(+ 2 (if (> b a) b a)) ; 2 + b + a if b > a

(* (cond ((> a b) a) ; if a is greater than b, pass a onto multiply
         ((< a b) b) ; if a is less than b, pass b onto multiply
         (else -1)) ; else, return negative one
       (+ a 1)) ; ... times a + 1 the result of cond
#+end_src

** DONE Ex. 1.2
:PROPERTIES:
:ID:       22007071-eaca-4d9e-b88f-ef21cf5759eb
:END:

#+begin_quote
*Exercise 1.2:* Translate the following expression into prefix
form.

     5 + 4 + (2 - (3 - (6 + 4/5)))
     -----------------------------
            3(6 - 2)(2 - 7)
#+end_quote

#+begin_src racket
#lang sicp

(/ (+ 5 4 (- 2 (- 3 (+ 6 4/5)))) (* 3 (- 6 2) (- 2 7)))
#+end_src

#+RESULTS:
: -37/150

** DONE Ex. 1.3
:PROPERTIES:
:ID:       366eb525-f202-45fe-ad71-fabdb54f3ef4
:END:

#+begin_quote
*Exercise 1.3:* Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.
#+end_quote

| a and b are greater than c                      | sum-square a and b              |
| a and c are greater than b                      | sum-square a and c              |
| b and c are greater than a                      | sum-square b and c              |
| a is greater than both b and c, which are equal | sum-square a with either b or c |
| b is greater than both a and c, which are equal | sum-square b with either a or c |
| c is greater than both a and b, which are equal | sum-square c with either a or b |
| all three numbers are equal to one another      | sum-square any two variables    |
| all three numbers are equal to zero             | return 0 or throw an error (not implemented here) |

#+begin_src racket
#lang sicp

(define (square a)
  (* a a))

(define (sum-square a b)
  (+ (square a) (square b)))

(define (fun a b c)
  (cond ((and (>= a c) (>= b c)) (sum-square a b))
        ((and (>= a b) (>= c b)) (sum-square a c))
        (else (sum-square b c))))

;; Checks
(= (fun 10 10 10) (sum-square 10 10))

(= (fun 1 10 10) (sum-square 10 10))
(= (fun 10 1 10) (sum-square 10 10))
(= (fun 10 10 1) (sum-square 10 10))

(= (fun 1 10 100) (sum-square 10 100))
(= (fun 1 100 10) (sum-square 10 100))
(= (fun 10 1 100) (sum-square 10 100))
(= (fun 10 100 1) (sum-square 10 100))
(= (fun 100 10 1) (sum-square 10 100))
(= (fun 100 1 10) (sum-square 10 100))
#+end_src

#+RESULTS:
#+begin_example
#t
#t
#t
#t
#t
#t
#t
#t
#t
#t
#+end_example

** DONE Ex. 1.4
:PROPERTIES:
:ID:       65266087-6c19-4ac4-ba9f-07cf00529a72
:END:

#+begin_quote
*Exercise 1.4:* Observe that our model of evaluation allows for combinations whose operators are compound expressions.  Use this observation to describe the behavior of the following procedure:
#+end_quote

#+begin_src racket
#lang sicp

(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))

(a-plus-abs-b 1 -15)
#+end_src

#+RESULTS:
: 16

If ~b~ is greater than ~0~, add ~a~ and ~b~.
If ~b~ is a negative number, negate it, i.e.,:

#+begin_src racket
#lang sicp

(- -15)
#+end_src

#+RESULTS:
: 15

and /then/ add ~a~ and ~b~ (which is now ~(- b)~ (which is the absolute value of ~b~)) together.

In other words, this is making use of unary operators.

** DONE Ex. 1.5
:PROPERTIES:
:ID:       5be84ee1-5cb6-400c-b80d-b2bfc5cf53f8
:END:

#+begin_quote
*Exercise 1.5:* Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation.  He defines the following two procedures:
#+end_quote

#+begin_src racket :eval no
#lang sicp

(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))

;; Then he evaluates the expression

(test 0 (p))
#+end_src

#+begin_quote
What behavior will Ben observe with an interpreter that uses applicative-order evaluation?

What behavior will he observe with an interpreter that uses normal-order evaluation?

Explain your answer.  (Assume that the evaluation rule for the special form `if' is the same whether the interpreter is using normal or applicative order: The predicate expression is evaluated first, and the result determines whether to evaluate the consequent or the alternative expression.)
#+end_quote


Applicative-order evaluation: ~(test 0 (p))~ makes it hang / get stuck in a loop as ~(p)~ gets eternally deferred.

A normal order-evaluator would do this instead:

#+begin_example racket
(test 0 (p))

(if (= 0 0)
     0
     (p))

(if #t
     0
     (p))
0
#+end_example

** DONE Ex. 1.6
:PROPERTIES:
:ID:       3224c89e-156e-4615-8ebe-6adcb347ed5e
:END:

#+begin_quote
*Exercise 1.6:* Alyssa P. Hacker doesn't see why `if' needs to be provided as a special form.  "Why can't I just define it as an ordinary procedure in terms of `cond'?" she asks.  Alyssa's friend Eva Lu Ator claims this can indeed be done, and she defines a new version of `if':
#+end_quote

#+begin_example racket
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
#+end_example

#+begin_quote
Eva demonstrates the program for Alyssa:
#+end_quote

#+begin_src racket
#lang sicp

(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))

(new-if (= 2 3) 0 5)

(new-if (= 1 1) 0 5)
#+end_src

#+RESULTS:
: 5
: 0

Delighted, Alyssa uses `new-if' to rewrite the square-root program:

#+begin_example racket
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)))
#+end_example

What happens when Alyssa attempts to use this to compute square
roots?  Explain.

It creates an infinite loop. Any function supplied to new-if will be applied, sqrt-iter
then loops forever after.
** TODO Ex. 1.7
:PROPERTIES:
:ID:       a51d676d-5ff2-440f-8a4d-ea5c355ab907
:END:
#+begin_quote
*Exercise 1.7:* The `good-enough?' test used in computing square roots will not be very effective for finding the square roots of very small numbers.  Also, in real computers, arithmetic operations are almost always performed with limited precision.  This makes our test inadequate for very large numbers.  Explain these statements, with examples showing how the test fails for small and large numbers.  An alternative strategy for implementing `good-enough?' is to watch how `guess' changes from one iteration to the next and to stop when the change is a very small fraction of the guess.  Design a square-root procedure that uses this kind of end test.  Does this work better for small and large numbers?
#+end_quote

#+begin_src racket
#lang sicp

(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))
#+end_src
